source('~/.active-rstudio-document')
z <- 10
f(3)
x <- 5
y <- if(x < 3) {}
10
y
source('~/.active-rstudio-document')
y
x
x <- 2
y
source('~/.active-rstudio-document')
y
source('~/.active-rstudio-document')
x <- 2
source('~/.active-rstudio-document')
y
source('~/.active-rstudio-document')
y
source('~/.active-rstudio-document')
f(3)
source('~/.active-rstudio-document')
z <- 10
f(3)
source('~/.active-rstudio-document')
pollutantmean("specdata", "sulfate", 1:10)
tmp <- read.csv("specdata/001.csv")
data <- data(iris)
class(data)
data
x <- data(iris)
class(x)
x
x
x
?iris
iris
str(split)
data(iris)
iris
View(iris)
x <- data(iris)
x
split(x, x$virginica)
split(x, virginica)
split(x, 3)
split(iris, 3)
x <- iris$species
x
iris
x <- iris$Species
x
lappy(split(iris, x), mean)
lapply(split(iris, x), mean)
f <- iris$virginica
f
lapply(split(iris, 3), mean)
lapply(split(iris, iris@virgnica), mean)
str(gl)
x <- iris[,5]
x
f <- gl(3, 10)
f
split(iris, virginica)
split(iris, 3)
split(iris, 3, drop = TRUE)
x <- iris[iris$species == "virinica"]
x
print(x)
x
factor(iris)
factor(iris$Species)
factor(iris$Species == virginica)
factor(iris$Species == "virginica"")
x <- factor(iris$Species == "virginica"")
)
x <- factor(iris$Species)
x
y <- split(iris, x)
y
lapply(split(x, y), mean)
mean(y)
mean(y$virginica)
tmp <- y$virginica
tmp
mean(y$Sepal.Length)
m <- is.numeric(mean(y$Sepal.Length))
j <- as.numberic(y$Sepal.Length)
j <- as.numeric(y$Sepal.Length)
j
mean(j)
history()
x
?levels
f <- factor(iris$Species)
level(f)
levels(f)
split(f)
split(iris, f)
tmp <- split(iris, f$viginica)
tmp <- split(iris, $viginica)
tmp <- split(iris, iris$viginica)
tmp <- split(f, iris$viginica)
tmp <- split(iris, f)
tmp
tmp2 <- tmp$virginica
tmp2
mean(tmp2$Sepal.Length)
x <- lapply(split(iris, f), mean(x$Sepal.Length))
x <- lapply(split(iris, f$virginica), mean(x$Sepal.Length))
class(tmp)
class(tmp2)
tmp2
data(iris)
f <- factor(iris$Species)
f
x <- split(iris, f)
x
x <- x$virginica
x
mean(x$Sepal.Length)
colmean(x)
colMean(x)
colMeans(x)
colMeans(x$Sepal.Length)
colMean(f)
colMeans(f)
colMeans(split(iris, f))
colMeans(as.matrix(x))
coMean(x)
coMeans(x)
colMeans(x)
x
y <- as.amtrix(x)
y <- as.matrix(x)
y
class(y)
colMeans(y)
colMeans(y$Sepal.Lenth)
colMeans(y$Sepal.Length)
data(iris)
f <- factor(iris$Species)
f
x <- split(iris, f)
x <- x$virginica
mean(x$Sepal.Length)
t <- lapply(split(iris, f), mean(t$viginica))
t <- lapply(split(iris, f), mean(t$Sepal.Length))
t <- lapply(split(iris, f), mean($Sepal.Length))
lapply(split(iris, f), mean)
lapply(split(iris, f), mean($virginica))
lapply(split(iris, f), mean(virginica$Sepal.Length))
lapply(split(iris, f), mean)
colMeans(split(iris, f))
data(iris)
head(Species)
head(iris)
s <- split(iris, iris$Species)
s
lapply(s, function(x) colMeans(x[, c("virginica")]))
s
levels(s)
lapply(s, function(x) colMeans(x[, c("Sepal.Length)]))
`
lapply(s, function(x) ColMeans(x[, $Sepal.Length]))
s$Sepal.Length
s
s$viginica
s$setosa
colname
colName
?col
lapply(s, function(x) colMeans[x[, "Sepal.Length"]])
lapply(s, function(x) colMeans[x[, "Sepal.Length"]])
s
apply(s, 3, mean)
dim(s)
class(s)
?as.array
apply(as.array(s), 3 mean)
apply(as.array(s), 3, mean)
iris$Species
levels(iris$Species)
apply(iris, 2, mean)
lelvels(iris$Sepal.Length)
levels(iris$Sepal.Length)
head(iris)
colMean(iris$Sepal.Length)
colMeans(iris$Sepal.Length)
colmeans(as.matrix(iris$Sepal.Length))
colMeans(as.matrix(iris$Sepal.Length))
s
s$virginica
x <- s$virginica
colMeans(as.marix(x$Sepal.Length))
colMeans(as.matrix(x$Sepal.Length))
history()
apply(iris[, 1:4], 2 mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
iris[, 1:4]
colMeans(iris)
colMeans(iris)
apply(iris[, 1:4], 1, mean)
x <- apply(iris[, 1:4], 1, mean)
class(x)
y <- apply([, 1:4], 2, mean)
y <- apply(iris[, 1:4], 2, mean)
class(y)
y
y$Sepal.Length
[,1]
y[,1]
y[1,]
y[1]
s <- split(iris, iris$Species)
s
y <- apply(s[, 1:4], 2, mean)
y <- apply(s, 2, mean)
y <- apply(s, 1, mean)
s
y <- apply(s$virginica, 2, mean)
y <- apply(s$virginica, 1, mean)
s$virginica
class(s$virginica)
y <- apply(as.matrix(s$virginica), 1, mean)
y <- apply(as.matrix(s$virginica), 2, mean)
y <- apply(as.matrix(s$virginica[,]), 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
s <- split(mtcars, mtcars$cyl)
s
debug(ls)
ls()
q
q
exit
exi()
exit()
n
n
n
debug(ls)
ls()
ls()
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
s <- split(mtcars, mtcars$cyl)
s
x4cyl <- s$`4`
x8cyl <- s$`8`
hp4 <- x$hp
hp4 <- x4cyl$hp
hp8 <- x8cyl$hp
diff <- abs(hp8) - abs(hp4)
hp4
hp4 <- colMean(as.matrix(x4cyl$hp))
hp4 <- colMeans(as.matrix(x4cyl$hp))
hp8 <- colMeans(as.matrix(x8cyl$hp))
diff <- abs(hp8) - abs(hp4)
diff
library(data)
library(dataset)
library(datasets)
airquality
x <- airquality
with(airquality, plot(Wind, Ozone, main = "Ozone/Wind in NYC", pch = 20, type = "n"))
with(subset(airquality, Month ==5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 20, col = c"blue", "red", legend = c("May", "NOT May"))
legend("topright", pch = 20, col = c("blue", "red"), legend = c("May", "NOT May"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "NOT May"))
model <- lm(Ozone ~ wind, airquality)
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
x <- airquality
with(x, plot(Wind, Ozone, main = "Ozone/Wind in NYC", pch = 20, type = "n"))
with(subset(airquality, Month ==5), points(Wind, Ozone, col = "blue", pch = 20))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red", pch = 20))
legend("topright", pch = 20, col = c"blue", "red", legend = c("May Data", "Other Month Data"))
legend("topright", pch = 20, col = c("blue", "red"), legend = c("May Data", "Other Month Data"))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 20, col = "green")
setwd("~/Coursera Data Science Working Directory")
## Read in the Data
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
## Summarize the NEI Emmissions data by year
EmissionsByYear <- tapply(NEI$Emissions, NEI$year, sum)
## Make the result readable (kilotons)
EmissionsByYear <- EmissionsByYear/(10^6)
## Plot to PNG file
png(file = "Plot1.png")
plot(EmissionsByYear, type = "b", ann = "FALSE", axes = "FALSE", pch = 20)
title(main = expression('Total PM'[2.5]*' Emissions (1999 to 2008)'),
xlab = 'Year', ylab = expression('Total Emissions in Kilotons'))
axis(1, at = c(1:4), labels = names(EmissionsByYear))
axis(2, at = c(1:8))
dev.off()
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
## Summarize the NEI Emmissions data by year for Balimore
BaltimoreCity <- subset(NEI, fips == 24510)
EmissionsByYear <- tapply(BaltimoreCity$Emissions,
BaltimoreCity$year, sum)
## Make the result readable (kilotons)
EmissionsByYear <- EmissionsByYear/(10^3)
## Plot to PNG file
png(file = "Plot2.png")
plot(EmissionsByYear, type = "b", ann = "FALSE", xaxt = "n", pch = 20)
lines(EmissionsByYear)
title(main = expression('Total PM'[2.5]*' Emissions for Baltimore City (1999 - 2008)'),
xlab = 'Year', ylab = expression('Total Emissions in Kilotons'))
axis(1, at = c(1:4), labels = names(EmissionsByYear))
dev.off()
library(ggplot2)
library(plyr)
## Read in the Data
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
## Summarize the NEI Emmissions data by year for Balimore
BaltimoreCity <- subset(NEI, fips == 24510)
Emissions <- ddply(BaltimoreCity, .(year, type), summarize,
sum = sum(Emissions))
## Plot to PNG file
png(file = "Plot3.png", width = 640, height = 480)
p <- ggplot(Emissions, aes(year,sum))
p + geom_point() +
facet_grid(.~type) +
ggtitle("Emissions per type in Baltimore City") +
ylab(expression(paste('Total', ' PM'[2.5], ' Emissions'))) +
xlab('Year')
dev.off()
library(ggplot2)
library(plyr)
## Read in the Data
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
## Get coal combustion-related data
coalData <- SCC[grepl("coal", SCC$Short.Name, ignore.case=TRUE), ]
## Merge coalData with NEI using the SCC ID
mergedData <- merge(NEI, coalData, by = "SCC")
## Summarize the data by Year
coalDataByYear <- ddply(mergedData, .(year), summarize,
Total= sum(Emissions))
##Plot the data to PNG file
png(file = "Plot4.png")
p <- ggplot(coalDataByYear, aes(year, Total/1000))
p + geom_line(aes(col = Total)) +
geom_point(aes(col = Total)) +
ggtitle(expression('Total Coal Combustion-related Emissions of PM'[2.5])) +
ylab(expression(paste('PM'[2.5], ' Emissions in Kilotons'))) +
xlab("Year")
dev.off()
library(ggplot2)
library(plyr)
## Read in the Data
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
## Get Vehicle Data (ON-ROAD) for Baltimore
BaltimoreRoad <- subset(NEI, fips == 24510 & type == "ON-ROAD")
##Summarize by Year
Emissions <- ddply(BaltimoreRoad, .(year), summarize,
Total = sum(Emissions))
##Plot the data to PNG file
png(file = "Plot5.png")
p <- ggplot(Emissions, aes(year, Total))
p + geom_line(aes(col = Total)) +
geom_point(aes(col = Total)) +
ggtitle("Total Motor Vehicle Emissions in Baltimore") +
ylab(expression(paste('PM'[2.5], ' Emissions'))) +
xlab("Year")
dev.off()
library(ggplot2)
library(plyr)
## Read in the Data
NEI <- readRDS("./data/summarySCC_PM25.rds")
SCC <- readRDS("./data/Source_Classification_Code.rds")
## Get Vehicle Data (ON-ROAD) for Baltimore and Summarize
BaltimoreRoad <- subset(NEI, fips == "24510" & type == "ON-ROAD")
BaltimoreSum <- ddply(BaltimoreRoad, .(year), summarize,
Total = sum(Emissions))
BaltimoreSum$City <- rep("Baltimore", 4)
## Get Vehicle Data (ON-ROAD) for Baltimore and Summarize
LARoad <- subset(NEI, fips == "06037" & type == "ON-ROAD")
LASum <- ddply(LARoad, .(year), summarize, Total = sum(Emissions))
LASum$City <- rep("LA County", 4)
## Combine the two datasets
combined <- rbind(BaltimoreSum, LASum)
## Plot to PNG file
png(file = "Plot6.png")
p <- qplot(factor(year), data = combined, geom="bar", fill = City,
weight = Total, position = "dodge")
p + ggtitle("Total Motor Vehicle Emissions") +
ylab(expression(paste('PM'[2.5], ' Emissions'))) +
xlab("Year")
dev.off()
